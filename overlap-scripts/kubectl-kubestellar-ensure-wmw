#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Purpose: ensure that a workload management workspace exists and has
# the needed APIBindings.

# Usage: $0 ($kubectl_flag | --with-kube boolean | -X)* wmw_name

function create_space() { # usage: space_name
    space_name=$1
    kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} create -f - <<EOF
apiVersion: space.kubestellar.io/v1alpha1
kind: Space
metadata:
  name: $space_name
  namespace: "${PROVIDER_NAMESPACE}"
spec:
  SpaceProviderDescName: "${PROVIDER_NAME}"
  Type: "managed"
EOF
    echo "Waiting for space $space_name to get into the Ready phase."
    until [ "$(kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} get space $space_name -n ${PROVIDER_NAMESPACE} -o yaml | grep Ready)" != "" ]; do
        sleep 1
    done
}

function get_kubeconfig_file() { # usage: space_name provider_namespace
    space_name="$1"
    provider_namespace="$2"
    if [ "$IN_CLUSTER" == "true" ] ; then
        secret_name=`kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} get space $space_name -n $provider_namespace -o jsonpath='{$.status.inClusterSecretRef.name}'`
        secret_namespace=`kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} get space $space_name -n $provider_namespace -o jsonpath='{$.status.inClusterSecretRef.namespace}'`
    else
        secret_name=`kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} get space $space_name -n $provider_namespace -o jsonpath='{$.status.externalSecretRef.name}'`
        secret_namespace=`kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} get space $space_name -n $provider_namespace -o jsonpath='{$.status.externalSecretRef.namespace}'`
    fi
    kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} get secret $secret_name -n $secret_namespace -o jsonpath='{$.data.kubeconfig}' | base64 -d | base64 -d > ${KUBECONFIG_DIR}/${provider_namespace}-${space_name}
}

function create_space_if_needed_and_get_config() { # usage: space_name
    space_name="$1"
    if kubectl --kubeconfig ${SPACE_MANAGER_KUBECONFIG} get space $space_name -n ${PROVIDER_NAMESPACE} 2>&1 | grep "not found" ; then
        create_space $space_name
    fi
    get_kubeconfig_file $space_name ${PROVIDER_NAMESPACE}
}

want_kube=true
wmw_name=""

while (( $# > 0 )); do
    case "$1" in
	(-h|--help)
	    echo "Usage: kubectl kubestellar ensure wmw (\$kubectl_flag | --with-kube boolean | -X)* wm_workspace_name"
	    exit 0;;
	(-X) set -o xtrace;;
	(--with-kube)
	    if (( $# >1 ))
	    then want_kube="$2"; shift
	    else echo "$0: missing with-kube value" >&2; exit 1
	    fi;;
	(--context*)
	    # TODO: support --context
	    echo "$0: --context flag not supported" >&2; exit 1;;
	(--*=*|-?=*)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";;
	(--*|-?)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";
	    if (( $# > 1 )); then 
		 kubectl_flags[${#kubectl_flags[*]}]="$2"
		 shift
	    fi;;
	(-*)
	    echo "$0: flag syntax error" >&2
	    exit 1;;
	(*)
	    if [ -z "$wmw_name" ]
	    then wmw_name="$1"
	    else echo "$0: too many positional arguments" >&2
		 exit 1
	    fi
    esac
    shift
done

if [ "$PROVIDER_NAME" == "" ]; then
    PROVIDER_NAME="default"
    export PROVIDER_NAME
fi
if [ "$PROVIDER_NAMESPACE" == "" ]; then
    PROVIDER_NAMESPACE=spaceprovider-${PROVIDER_NAME}
    export PROVIDER_NAMESPACE
fi
if [ "$KUBECONFIG_DIR" == "" ]; then
    KUBECONFIG_DIR="temp-space-config"
    mkdir -p $KUBECONFIG_DIR
    export KUBECONFIG_DIR
fi
if [ "$SPACE_MANAGER_KUBECONFIG" == "" ]; then
    SPACE_MANAGER_KUBECONFIG="${KUBECONFIG_DIR}/config"
    export SPACE_MANAGER_KUBECONFIG
fi
if [ "$IN_CLUSTER" == "" ]; then
    IN_CLUSTER=true
    export IN_CLUSTER
fi

echo "SPACE_MANAGER_KUBECONFIG=${SPACE_MANAGER_KUBECONFIG}"
echo "PROVIDER_NAME=${PROVIDER_NAME}"
echo "PROVIDER_NAMESPACE=${PROVIDER_NAMESPACE}"
echo "IN_CLUSTER=${IN_CLUSTER}"

if [ "$wmw_name" == "" ]; then
    echo "$0: workload management workspace name not specified" >&2
    exit 1
fi

case "$want_kube" in
    (true|false) ;;
    (*) echo "$0: with-kube should be true or false" >&2
	exit 1;;
esac

set -e

create_space_if_needed_and_get_config ${wmw_name}

# TODO: remove kcp dependency
KUBECONFIG=/home/kubestellar/.kcp/admin.kubeconfig
kubectl ws "${kubectl_flags[@]}" root:"$wmw_name"

if ! kubectl "${kubectl_flags[@]}" get APIBinding bind-espw &> /dev/null; then
kubectl "${kubectl_flags[@]}" apply -f - <<EOF
apiVersion: apis.kcp.io/v1alpha1
kind: APIBinding
metadata:
  name: bind-espw
spec:
  reference:
    export:
      path: root:espw
      name: edge.kubestellar.io
EOF
fi

function bind_iff_wanted() { # usage: export_name
    export_name=$1
    binding_name=bind-$export_name
    if [ "$want_kube" == true ] && ! kubectl "${kubectl_flags[@]}" get APIBinding ${binding_name} &> /dev/null; then
kubectl "${kubectl_flags[@]}" apply -f - <<EOF
apiVersion: apis.kcp.io/v1alpha1
kind: APIBinding
metadata:
  name: ${binding_name}
spec:
  reference:
    export:
      path: root:compute
      name: ${export_name}
EOF
elif [ "$want_kube" == false ] && kubectl "${kubectl_flags[@]}" get APIBinding ${binding_name} &> /dev/null; then
     kubectl "${kubectl_flags[@]}" delete APIBinding ${binding_name}
fi
}

bind_iff_wanted kubernetes
bind_iff_wanted apiregistration.k8s.io
bind_iff_wanted apps
bind_iff_wanted autoscaling
bind_iff_wanted batch
bind_iff_wanted core.k8s.io
bind_iff_wanted cluster-core.k8s.io
bind_iff_wanted discovery.k8s.io
bind_iff_wanted flowcontrol.apiserver.k8s.io
bind_iff_wanted networking.k8s.io
bind_iff_wanted cluster-networking.k8s.io
bind_iff_wanted node.k8s.io
bind_iff_wanted policy
bind_iff_wanted scheduling.k8s.io
bind_iff_wanted storage.k8s.io
bind_iff_wanted cluster-storage.k8s.io
