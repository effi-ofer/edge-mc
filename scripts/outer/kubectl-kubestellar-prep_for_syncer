#!/usr/bin/env bash

# Copyright 2023 The KubeStellar Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Usage: $0 ($kubectl_flag | -o file_pathname | --syncer-image container_image_ref | --imw worskpace_path | --espw workspace_path | -X)* synctarget_name

# Purpose: For the given SyncTarget, (a) prepare the corresponding
# mailbox workspace for the syncer and (b) output the YAML that needs
# to be created in the edge cluster to install the syncer there.

# This script requires the `kubestellar syncer-gen` kubectl plugin to
# already exist at ../bin/kubectl-kubestellar-syncer_gen.

bindir="$(dirname "$0")"

if ! [ -x "$bindir/kubectl-kubestellar-syncer_gen" ]; then
    echo "$0: $bindir/kubectl-kubestellar-syncer_gen does not exist; did you 'make build' or unpack a release archive here?" >&2
    exit 2
fi

rootws="root"
stname=""
output=""
syncer_image="quay.io/kubestellar/syncer:release-0.15"
kubectl_flags=()
silent="false"

while (( $# > 0 )); do
    case "$1" in
	(-h|--help)
	    echo "Usage: kubectl kubestellar prep-for-syncer (\$kubectl_flag | --imw ws_path | --espw ws_path | --syncer-image image_ref | -o filename | -s | -X)* synctarget_name"
	    exit 0;;
	(-X) set -o xtrace;;
	(--imw)
	    if (( $# >1 ))
	    then imw="$2"; shift
	    else echo "$0: missing IMW pathname" >&2; exit 1
	    fi;;
	(--espw)
	    if (( $# >1 ))
	    then espw="$2"; shift
	    else echo "$0: missing ESPW pathname" >&2; exit 1
	    fi;;
	(--syncer-image)
	    if (( $# >1 ))
	    then syncer_image="$2"; shift
	    else echo "$0: missing syncer image reference" >&2; exit 1
	    fi;;
	(-o)
	    if (( $# >1 ))
	    then output="$2"; shift
	    else echo "$0: missing output filename" >&2; exit 1
	    fi;;
	(-s|--silent)
	    silent="true";;
	(--context*)
	    # TODO: support --context
	    echo "$0: --context flag not supported" >&2; exit 1;;
	(--*=*|-?=*)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";;
	(--*|-?)
	    kubectl_flags[${#kubectl_flags[*]}]="$1";
	    if (( $# > 1 )); then 
		 kubectl_flags[${#kubectl_flags[*]}]="$2"
		 shift
	    fi;;
	(-*)
	    echo "$0: flag syntax error" >&2
	    exit 1;;
	(*)
	    if [ -z "$stname" ]
	    then stname="$1"
	    else echo "$0: too many positional arguments" >&2
		 exit 1
	    fi
    esac
    shift
done

if [ -z "$imw" ]; then
    echo "$0: must be given a non-empty imw space name" >&2
    exit 1
fi

if [ -z "$espw" ]; then
    echo "$0: must be given a non-empty espw space name" >&2
    exit 1
fi

if [ "$stname" == "" ]; then
    echo "$0: SyncTarget name was not specified" >&2
    exit 1
fi

if [ "$output" == "" ]; then
    output="${stname}-syncer.yaml"
fi

set -e

imw_space_config="${PWD}/temp-space-config/spaceprovider-default-${imw}"
kubectl-kubestellar-get-config-for-space --space-name ${imw} --provider-name default --sm-core-config $SM_CONFIG --sm-context $SM_CONTEXT --output $imw_space_config
mbwsname=$(KUBECONFIG=$imw_space_config kubectl "${kubectl_flags[@]}" get synctargets.edge.kubestellar.io "$stname" -o jsonpath="{.metadata.annotations['kcp\.io/cluster']}-mb-{.metadata.uid}")

if ! [[ "$imw" =~ [a-z0-9].* ]]; then
    echo "$0: imw ${espw@Q} is not valid" >&2
    exit 1
fi

if ! [[ "$espw" =~ [a-z0-9].* ]]; then
    echo "$0: espw ${espw@Q} is not valid" >&2
    exit 1
fi

espw_space_config="${PWD}/temp-space-config/spaceprovider-default-${espw}"
kubectl-kubestellar-get-config-for-space --space-name ${espw} --provider-name default --sm-core-config $SM_CONFIG --sm-context $SM_CONTEXT --output $espw_space_config

if ! cluster_ns_name="$(KUBECONFIG=$espw_space_config kubectl "${kubectl_flags[@]}" -n kubestellar get configmap kbmap-"$imw" -ojsonpath="{.metadata.labels['kubestellar\.io\/kube-bind-id']}")"; then
	echo "error reading kube-bind cluster namespace from ConfigMap kbmap-$imw" >&2
	exit 1
fi

prefixed_stname="$cluster_ns_name"-"$stname"
stUID=$(KUBECONFIG=$espw_space_config kubectl "${kubectl_flags[@]}" get synctargets.edge.kubestellar.io $prefixed_stname -o jsonpath="{.metadata.uid}")
mbwsname="$imw"-mb-"$stUID"

if ! KUBECONFIG=$espw_space_config kubectl "${kubectl_flags[@]}" get APIExport edge.kubestellar.io &> /dev/null ; then
    echo "$0: it looks like ${espw@Q} is not the edge service provider workspace" >&2
    exit 2
fi

if ! KUBECONFIG=$SM_CONFIG kubectl get space -n spaceprovider-default "$mbwsname" &> /dev/null; then
	echo "maybe the mailbox controller is slow, give it a chance"
    sleep 15
fi

if ! KUBECONFIG=$SM_CONFIG kubectl get space -n spaceprovider-default "$mbwsname" &> /dev/null; then
	echo "maybe the mailbox controller is slow, give it another chance"
    sleep 15
fi

if ! KUBECONFIG=$SM_CONFIG kubectl get space -n spaceprovider-default "$mbwsname" &> /dev/null; then
    echo "$0: did not find the mailbox workspace $mbwsname; is the mailbox controller running?" >&2
    exit 5
fi

echo "now that workspace _exists_, but is it _ready_?"
sleep 5

TESTMB_CMD="KUBECONFIG=$SM_CONFIG kubectl get space -n spaceprovider-default "$mbwsname" -o=jsonpath='{.status.Phase}'"


if  phase=$(TESTMB_CMD); [ "$phase" != "READY" ]; then
    echo "tried once to switch to $mbwsname"
    sleep 15
    if phase=$(TESTMB_CMD); [ "$phase" != "READY" ]; then
        echo "tried twice to switch to $mbwsname"
        sleep 15
    fi
fi

mbwsname_space_config="${PWD}/temp-space-config/spaceprovider-default-${mbwsname}"
kubectl-kubestellar-get-config-for-space --space-name ${mbwsname} --provider-name default --sm-core-config $SM_CONFIG --sm-context $SM_CONTEXT --output $mbwsname_space_config

KUBECONFIG=$mbwsname_space_config $bindir/kubectl-kubestellar-syncer_gen "$prefixed_stname" --syncer-image "$syncer_image" -o "$output"
